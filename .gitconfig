[core]
	autocrlf = false
	quotepath = false
	whitespace = cr-at-eol
	editor = atom --wait
[color]
	ui = auto
[push]
	default = current
[merge]
	ff = false
[pull]
	rebase = preserve
[pretty]
	simple = "tformat:%C(auto,yellow)%h%Creset %C(auto,magenta)%cd%Creset %C(dim white)-%Creset%C(auto)%d%Creset %s %C(dim white)-%Creset %C(auto,bold blue)%an%Creset"
	subject = "format:%C(auto,yellow)%h%Creset %C(auto,magenta)%cd%Creset %C(auto,bold blue)%an <%ae>%Creset%n%n%w(0,4,4)%s%n"
	message = "format:%C(auto,yellow)%h%Creset %C(auto,magenta)%cd%Creset %C(auto,bold blue)%an <%ae>%Creset%n%n%w(0,4,4)%B"
[alias]
	a = add
	au = add -u
	aa = add -A
	ap = add -p
	c = commit -v
	cm = commit -m
	s = status -sb
	st = status
	d = diff
	dc = diff --cached
	dw = diff --word-diff=color --unified=1
	dwc = diff --word-diff=color --unified=1 --cached
	dd = difftool --dir-diff
	ddc = difftool --dir-diff --cached
	dr = !"f() { local r=${1:-HEAD}; git diff $r~..$r; }; f"
	b = branch
	ba = branch -a
	bd = branch -d
	co = checkout
	cob = checkout -b
	r = reset
	rs = reset --soft
	rh = reset --hard
	pl = pull
	ps = push
	f = fetch
	fp = fetch --prune
	m = merge
	mf = merge --ff
	ms = merge --squash
	rb = rebase
	rbi = rebase -i
	cp = cherry-pick
	sl = stash list
	ss = stash save --include-untracked
	sa = !"f() { git stash apply stash@{${1:-0}}; }; f"
	sd = !"f() { git stash drop stash@{${1:-0}}; }; f"
	sp = !"f() { git stash pop stash@{${1:-0}}; }; f"
	l = log --pretty=simple --date=relative -n 20
	la = log --pretty=simple --date=relative --graph --all -n 20
	ll = log --pretty=simple --date=format:'%Y-%m-%d %H:%M'
	lla = log --pretty=simple --date=format:'%Y-%m-%d %H:%M' --graph --all
	ln = log --name-status --graph --pretty=subject --date=iso
	lp = log --patch --pretty=subject --date=iso
	ls = log --stat --pretty=message --date=iso
	lt = log --simplify-by-decoration --pretty=message --date=iso
	sh = show
	alias = !"f () { git config --get-regexp '^alias\\.' | sed 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\\t => \\2/' | sort; }; f"
	this = !"f() { git init; git setup \"$@\"; [ -f .gitignore ] && git add .gitignore; }; f"
	setup = !"f() { [ $# -lt 1 ] && exit; local s=\"$1\"; shift; for x in \"$@\"; do s=\"$s,$x\"; shift; done; curl -L -s -o .gitignore \"http://www.gitignore.io/api/$s\"; }; f"
	ignore = !"f() { for x in \"$@\"; do echo \"$x\" >> \"${GIT_PREFIX}.gitignore\"; shift; done; }; f"
	discard = checkout --
	unstage = reset -q HEAD --
	uncommit = reset --mixed HEAD~
	recommit = commit --amend --no-edit
	amend = commit --amend -v
	wip = !"f() { git add -A; git commit -m \"WIP $(date '+%Y-%m-%d %H:%M')\"; }; f"
	undo = !"f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1:-1}}; }; f"
	info = !"f() { git remote show ${1:-origin}; }; f"
	branches = branch -avv
	tags = tag
	stashes = stash list
	remotes = remote -v
[difftool]
	prompt = false
[mergetool]
	prompt = false
	keepBackup = false
[diff "opml"]
	textconv = opml2md
[url "git@github.com:"]
	pushInsteadOf = https://github.com/
	pushInsteadOf = git://github.com/
[url "git@bitbucket.org:"]
	pushInsteadOf = https://bitbucket.org/
	pushInsteadOf = git://bitbucket.org/
[ghq]
	root = ~/dev/src
	root = ~/dev/go/src
[include]
	path = ~/.gitconfig.user
	path = ~/.gitconfig.os
	path = ~/.gitconfig.local
